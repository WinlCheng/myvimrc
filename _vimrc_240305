" Vim with all enhancements
" baseoption{{{
source $VIMRUNTIME/vimrc_example.vim

" Use the internal diff if available.
" Otherwise use the special 'diffexpr' for Windows.
if &diffopt !~# 'internal'
  set diffexpr=MyDiff()
endif
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg1 = substitute(arg1, '!', '\!', 'g')
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg2 = substitute(arg2, '!', '\!', 'g')
  let arg3 = v:fname_out

  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let arg3 = substitute(arg3, '!', '\!', 'g')
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      if empty(&shellxquote)
        let l:shxq_sav = ''
        set shellxquote&
      endif
      let cmd = '"' . $VIMRUNTIME . '\diff"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  let cmd = substitute(cmd, '!', '\!', 'g')
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
  if exists('l:shxq_sav')
    let &shellxquote=l:shxq_sav
  endif
endfunction

" }}}

"vim-plug {{{

call plug#begin('C:\Users\jingw\vimfiles\plugged')
Plug 'sirver/ultisnips'
    let g:UltiSnipsExpandTrigger = '<tab>'
    let g:UltiSnipsJumpForwardTrigger = '<tab>'
    let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'
	let g:UltiSnipsEditSplit = 'vertical'
Plug 'honza/vim-snippets'


Plug 'lervag/vimtex'
    let g:tex_flavor='latex'
	let g:Tex_ViewRule_pdf = 'SumatraPDF -reuse-instance -inverse-search "gvim -c \":RemoteOpen +\%l \%f\""'
    let g:vimtex_quickfix_mode=2
    let g:vimtex_view_general_viewer = 'SumatraPDF'
	let g:vimtex_view_general_options_latexmk = '-reuse-instance'
	let g:vimtex_view_general_options
		\ = '-reuse-instance -forward-search @tex @line @pdf'
	   	\ . ' -inverse-search "gvim --servername ' . v:servername
	   	\ . ' --remote-send \"^<C-\^>^<C-n^>'
	   	\ . ':drop \%f^<CR^>:\%l^<CR^>:normal\! zzzv^<CR^>'
	   	\ . ':execute ''drop '' . fnameescape(''\%f'')^<CR^>'
	   	\ . ':\%l^<CR^>:normal\! zzzv^<CR^>'
	   	\ . ':call remote_foreground('''.v:servername.''')^<CR^>^<CR^>\""'
	let g:vimtex_quickfix_open_on_warning=0

	let g:vimtex_texcount_custom_arg=' -ch -total'
"映射VimtexCountWords！\lw 在命令模式下enter此命令可统计中英文字符的个数
	au FileType tex map <buffer> <silent>  <leader>lw :VimtexCountWords!  <CR><CR>



Plug 'KeitaNakamura/tex-conceal.vim'
	    set conceallevel=1
    let g:tex_conceal='abdmg'
    hi Conceal ctermbg=none

Plug 'preservim/nerdtree'

setlocal spell
set spelllang=en_us
inoremap <C-l> <c-g>u<Esc>[s1z=`]a<c-g>u

call plug#end()

" }}}

" 自定义设置 {{{
" 设置vim内置显示的编码，并且解决输出窗口编码乱码
set encoding=utf-8
lang messages zh_CH.UTF-8

" 设置字体
set guifont=Courier\ New:h12
set guifontwide=霞鹜文楷等宽:h13
" 设置折叠栏宽度
set fdc=2

" 设置兼容vi，这与Ultisnip冲突，不开启
" set compatible
set nocompatible

" 设置折行
set wrap
" 设置显示行号
set nu
" 设置相对行号，需要多行跳转好用
set rnu
" 设置Tab键缩进行数
set tabstop=4
" 设置自动缩进的行数
set shiftwidth=4
" 设置折叠方式
set foldmethod=marker
" 设置折叠标记
set foldmarker={{{,}}}

" 设置不产生交换文件
set noswf
" 设置记住的命令行数量
set history=128
" 设置备份文件
set backup
" 设置初始文件位置
cd C:\Jw_PersonalFiles\txtfile
" 关闭拼写检查
set nospell

syntax enable

" 不创建备份文件
set nobk
" Vim 的默认寄存器和系统剪贴板共享
set clipboard+=unnamed
" 设置 alt 键不映射到菜单栏
set winaltkeys=no
" 自动开启NERDtree
autocmd VimEnter * NERDTree
"}}}

" 键盘映射{{{
nnoremap <esc> :noh<return><esc>
"}}}
